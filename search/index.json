[{"content":"常用操作 本地修改后添加、提交、推送 git add . git commit -m 'xxx' git push (git push --set-upstream origin main仅第一次)\n切换账户 git config user.name git config user.email git config --global user.name \u0026quot;your_username git config user.email \u0026quot;your_email\u0026quot;\n仓库迁移(迁移一个分支到新仓库) 查看当前远程仓库 git remote -v 先保证本地代码是最新代码 $ git pull -r 修改远程仓库地址 $ git remote set-url origin https://github.com/xxx/box.git 推送代码到新仓库 $ git push -u origin master\n迁移全部代码,即所有分支及tag 克隆一个完整的项目到本地(包含所有分支及tag) $ git clone --mirror https://github.com/xxx/box.git 修改远程仓库地址 $ git remote set-url origin https://gitlab.com/qyf404/box.git 推送本地所有代码到远程 $ git push --mirror\n切换远程仓库 git remote rm origin git remote add origin url\n常见报错  QRP@LAPTOP-6IBMM85V MINGW64 /e/Hugo/push_hugo (main) $ git push fatal: The current branch main has no upstream branch. To push the current branch and set the remote as upstream, use git push --set-upstream origin main QRP@LAPTOP-6IBMM85V MINGW64 /e/Hugo/push_hugo (main) $ git push --set-upstream origin main To github.com:weotr/weotr.github.io.git ! [rejected] main -\u0026gt; main (non-fast-forward) error: failed to push some refs to 'github.com:weotr/weotr.github.io.git' hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. debug: 将要上传的本地库备份，另建一个空文件夹 git clone url整个项目 git init 删掉远程仓库clone下来的内容,拖入备份文件 git add . git commit -m \u0026quot;提交信息\u0026quot; git pull --mirror\n","date":"2022-06-13T14:50:32+08:00","permalink":"https://weotr.github.io/p/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/","title":"git基础操作"},{"content":" sc config i8042prt start= disabled/auto禁用/开启笔记本键盘，重启生效\nMaterials Studios相关 键盘输入时页面卡死\u0026ndash;\u0026gt;微软拼音打开兼容性设置\n","date":"2022-06-02T17:11:34+08:00","permalink":"https://weotr.github.io/p/win10%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86memo/","title":"Win10故障处理memo"},{"content":"直接看这篇教程，下边是我自己用vscode写markdown文件的一些留意事项\nmarkdown基本使用(vscode) 配合插件（vscode）  Markdown Preview Enhanced Markdown TOC Excel to Markdown Paste Image  插入图片  使用paste image插件直接复制黏贴（不推荐）  这种方法插入的图片不能直接黏贴到博客页上，最好使用下面base64码转换的方法，可以任意复制黏贴全文 webp用格式工厂转换下（base64码好长一段，虽然能收起来，非必要不用） 把图片转换成base64代码 代码太长vscode中可使用折叠方案，用标签\u0026lt;!-- #region --\u0026gt;图片地址\u0026lt;!-- #endregion --\u0026gt;\n禅模式 更注重sematics 我要抄单词啦 crtl+i斜体；crtl+b加粗加黑\n公式 $$ 学一下Latex公式的使用 $$\n表格    电磁学 理论力学 量子力学     12 13 14   合格 良好 优秀       电磁学 理论力学 量子力学     12 13 14   合格 良好 优秀    （这里不知道为什么用Preview content渲染出的表格没有边框线qwq,hexo渲染raw部分没有对齐）\n链接 这是一个链接 复制链接，crtl+v到相应的文字上\n输出为pdf 在Preview content中右击，选择Open in Browser,crtl+P\n添加代码块 用```加代码表示 用hexo写博客，建议用下边这种。 {% codeblock %} {% endcodeblock %}\n参考教程：markdown终极教程\n","date":"2022-05-17T19:46:18+08:00","permalink":"https://weotr.github.io/p/markdown%E8%AF%AD%E6%B3%95/","title":"Markdown语法"},{"content":"常用命令 hugo new site \u0026quot;$mysite\u0026quot;创建新站点\nhugo version查看版本\nhugo env版本和环境详细信息\nhugo new post/index.md创建文章\nhugo编译生成静态文件,Hugo将编译所有文件并输出到public目录\nhugo server编译生成静态文件并启动web服务\nhugo+github手动推送流程 hugo生成静态文件，将public文件夹下内容复制到本地xxx.github.io文件夹下\n进入xxx.github.io文件夹下\ngit add .提交全部内容到xxx.github.io文件夹下(注意空格)\ngit commit -m '提交信息(必填)'\ngit push\niframe+obsidian在hugo中插入幕布 hugo不支持iframe嵌入，需要使用shortcode方式设置： [参考](https://github.com/ericswpark/hugo-iframe）\n{{/\u0026lt;/iframe url=\u0026quot;https://music.163.com/outchain/player?type=2\u0026amp;id=25638827\u0026amp;auto=1\u0026amp;height=66\u0026quot;\u0026gt;}}(前面两处斜杠防止被渲染)\n使用obsidian中convert url to iframe插件：Alt+I快捷键到网址上\nhugo本地发布脚本（自动部署后弃用） $bash deploy.sh\nhugo+github pages/vercel 2022-8 vercel已经挂了。。\n使用forestry在线发布 遇到的问题：forestry编辑内容无法更新到博客上，查看github仓库发现仓库内容已更新。猜想可能是hugo更新content内容后没有生成页面。\n","date":"2022-05-17T19:37:00+08:00","permalink":"https://weotr.github.io/p/hugo%E5%A4%87%E5%BF%98%E5%BD%95/","title":"Hugo备忘录"},{"content":"· 相关工具 1、安装node.js 2、安装npm 3、安装git 4、检测安装成功 打开cmd命令行，分别执行，\nnpm -v\ngit --version 如果出现版本信息就安装成功\n5、安装hexo 打开cmd，执行\nnpm install hexo-cli -g\n等待安装完成，输入 hexo -v 出现版本号则安装成功\n· 配置远程仓库 1、注册github账户，add a new repository 格式为\u0026quot;用户名.github.io\u0026quot;，此地址即为网站域名 pulic类型\n创建之后，点setting设置远程库，找到Github Pages 点击Automatic page generator\n2、本地生成ssh并与仓库绑定 $ cd ~/.ssh #查看本机已存在的ssh 如果没有， ssh-keygen -t rsa -C ''邮件地址'' 3次回车， 生成一个ssh公钥，找到.ssh文件夹，记事本打开复制.pub文件内容 github-\u0026gt;设置-\u0026gt;ssh-\u0026gt;将公钥内容复制到key，title随便，保存 测试是否成功 $ ssh -T git@github.com #邮件地址不用改 输入yes，出现'\u0026lsquo;hi ***,You\u0026rsquo;re successfully~\u0026lsquo;\u0026lsquo;则配置成功\n配置 $ git config --global user.name ''github用户名''\n$ git config --global user.email ''邮箱''\n附：git其他操作（跳过） git add git conmmit -m '提交信息' git checkout -b hexo创建并切换到新分支hexo，默认的master用来部署更新项目 git push origin hexo提交后到github把hexo分支设置默认\n· 将hexo模板放到github 创建一个文件夹用于存放hexo，进入此文件夹右键git bush here 使用 $ npm install hexo --save $ hexo init $ npm install $ hexo g $ hexo s打开http://localhost:4000即可看到内容 修改_config.yml\nlangurage: ZH-hans deploy: type: git repo: github上仓库ssh的链接 branch：main\n$ npm install hexo-deployer-git -save 安装远程部署插件\n$ hexo clean 清除public及_deploy缓存文件\n$ hexo d -g 生成静态页面并部署到GitHub\n","date":"2022-04-19T13:33:08+08:00","permalink":"https://weotr.github.io/p/hexo%E5%9F%BA%E7%A1%80/","title":"Hexo基础"}]